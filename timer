#! /bin/python
import argparse
import os
import time
import atexit
import math
from colorama import Style, Back, Fore, init
init()
os.system('setterm -cursor off')  # turn off terminal cursor


def show_curs():
    print(Style.RESET_ALL, end='')  # reset all styles before exit
    print('\nExit')
    os.system('setterm -cursor on')  # turn on terminal cursor


atexit.register(show_curs)


class StyleHandler():
    def reset_style(self):
        print(Style.RESET_ALL, end='')

    def set_alarm_style(self):
        print(f'{Back.RED}{Fore.WHITE}{Style.BRIGHT}', end='')

    def set_invert_style(self):
        print(f'{Back.WHITE}{Fore.BLACK}{Style.BRIGHT}', end='')

    def set_normal_style(self):
        self.reset_style()
        print(f'{Style.BRIGHT}', end='')


class PrintHandler():
    def __init__(self):
        self._styleHandler = StyleHandler()

    def print_normal_msg(self, msg):
        self._styleHandler.set_normal_style()
        print(msg, end='')

    def print_invert_msg(self, msg):
        self._styleHandler.set_invert_style()
        print(msg, end='')

    def print_alarm_msg(self, msg):
        self._styleHandler.set_alarm_style()
        print(msg, end='')

    def print_timer_blink_msg(self, msg, num):
        if num % 2 == 0:
            self.print_normal_msg(msg)
        else:
            if num > 10:
                self.print_invert_msg(msg)
            else:
                self.print_alarm_msg(msg)

    def print_regular_blink_msg(self, msg, num):
        if num % 2 == 0:
            self.print_normal_msg(msg)
        else:
            self.print_invert_msg(msg)

    def _create_alarm_message(self):
        self._alarm_message = ('ALARM ' * math.ceil(os.get_terminal_size().columns / 6)
                               )[:os.get_terminal_size().columns]

    def begin_alarm(self):
        i = 0
        self._create_alarm_message()
        while True:
            if i % 10 == 0:
                self._styleHandler.set_invert_style()
                print(self._alarm_message)
            else:
                self._styleHandler.set_alarm_style()
                print(self._alarm_message)
            time.sleep(0.03)
            i += 1


class StopWatchTime():

    def __init__(self):
        self.set__stopwatch_time(0)

    def set__stopwatch_time(self, val):
        self._counted_time = val

    def get__stopwatch_time(self):
        return self._counted_time

    def get_separated_time(self):
        seconds = self.get__stopwatch_time()

        h = seconds // 3600
        m = (seconds % 3600) // 60
        s = (seconds % 3600) % 60

        return h, m, s

    def increment_time(self):
        self._counted_time += 1


class TimerTime():

    def __init__(self, total_seconds):
        self._left_raw_time = 0
        self.set_raw_time(total_seconds)

    def set_raw_time(self, val):
        self._left_raw_time = val

    def get_raw_time(self):
        return self._left_raw_time

    def get_separated_time(self):
        seconds = self.get_raw_time()

        h = seconds // 3600
        m = (seconds % 3600) // 60
        s = (seconds % 3600) % 60

        return h, m, s

    def decrement_time(self):
        if self.get_raw_time() > 0:
            self._left_raw_time -= 1

    def can_decrement(self):
        return True if self.get_raw_time() > 0 else False


class Timer():
    def __init__(self, total_seconds):
        self._timer_time = TimerTime(total_seconds)
        self._printHandler = PrintHandler()

    def start_timer(self):
        try:
            while self._timer_time.can_decrement():
                msg = '>{:02}:{:02}:{:02}\r'.format(
                    *self._timer_time.get_separated_time())
                self._printHandler.print_timer_blink_msg(
                    msg, self._timer_time.get_raw_time())

                time.sleep(1)
                self._timer_time.decrement_time()

            self._printHandler.begin_alarm()
        except KeyboardInterrupt:
            exit()


class StopWatch():

    def __init__(self):
        self._stopwatch_time = StopWatchTime()
        self._printHandler = PrintHandler()

    def start_count(self):
        try:
            while True:
                msg = '>{:02}:{:02}:{:02}\r'.format(
                    *self._stopwatch_time.get_separated_time())
                self._printHandler.print_regular_blink_msg(
                    msg, self._stopwatch_time.get__stopwatch_time())

                time.sleep(1)
                self._stopwatch_time.increment_time()

        except KeyboardInterrupt:
            exit()


class ParseHandler():

    def __init__(self):
        self._parser = argparse.ArgumentParser()

    def start_parsing(self):
        self._parser.add_argument(
            '-H', type=int, help='total time in hours', default=0)
        self._parser.add_argument(
            '-m', type=int, help='total time in minutes', default=0)
        self._parser.add_argument(
            '-s', type=int, help='total time in seconds', default=0)
        self._parser.add_argument(
            '-sw', help='start stopwatch', action='store_true')

        args = self._parser.parse_args()

        if args.H or args.m or args.s:
            timer = Timer((args.H * 60 * 60) + (args.m * 60) + args.s)
            timer.start_timer()
        elif args.sw:
            stopWatch = StopWatch()
            stopWatch.start_count()


parseHandler = ParseHandler()
parseHandler.start_parsing()
