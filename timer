#! /bin/python
import argparse
import os
import time
import atexit
import math
from colorama import Style, Back, Fore, init
from abc import ABC, abstractmethod
init()
os.system('setterm -cursor off')  # turn off terminal cursor


def show_curs():
    print(Style.RESET_ALL, end='')  # reset all styles before exit
    print('\nExit')
    os.system('setterm -cursor on')  # turn on terminal cursor


atexit.register(show_curs)


class Styles:
    ALARM = f'{Back.RED}{Fore.WHITE}{Style.BRIGHT}'
    INVERT = f'{Back.WHITE}{Fore.BLACK}{Style.BRIGHT}'
    NORMAL = f'{Style.BRIGHT}'


class PrintHandler:
    @staticmethod
    def print(msg, style, end=''):
        print(style + msg + Style.RESET_ALL, end=end)

    @classmethod
    def print_timer_blink_msg(cls, msg, secs):
        if secs % 2 == 0:
            cls.print(msg, Styles.NORMAL)
        else:
            if secs > 10:
                cls.print(msg, Styles.INVERT)
            else:
                cls.print(msg, Styles.ALARM)

    @classmethod
    def print_regular_blink_msg(cls, msg, secs):
        if secs % 2 == 0:
            cls.print(msg, Styles.NORMAL)
        else:
            cls.print(msg, Styles.INVERT)


class Alarmer:
    def _get_alarm_message():
        COLS = os.get_terminal_size().columns
        LINES = os.get_terminal_size().lines
        return ('ALARM ' * math.ceil(COLS / 6))[:COLS]

    @classmethod
    def begin_alarm(cls):
        i = 0
        alarm_msg = cls._get_alarm_message()
        while True:
            if i % 10 == 0:
                PrintHandler.print(alarm_msg, Styles.INVERT, end='\n')
            else:
                PrintHandler.print(alarm_msg, Styles.ALARM, end='\n')

            time.sleep(0.03)
            i += 1


class Time(ABC):
    def __init__(self, seconds):
        self._seconds = seconds

    def get_separated_time(self):
        seconds = self._seconds

        h = seconds // 3600
        m = (seconds % 3600) // 60
        s = (seconds % 3600) % 60

        return h, m, s

    def __index__(self):
        return self._seconds

    def __repr__(self):
        h, m, s = self.get_separated_time()
        return f'>{h:02}:{m:02}:{s:02}\r'

    @abstractmethod
    def move_time(self):
        pass


class StopWatchTime(Time):
    def move_time(self):
        self._seconds += 1


class TimerTime(Time):
    def move_time(self):
        self._seconds -= 1


class Timer():
    def __init__(self, seconds):
        self._time = TimerTime(seconds)

    def start_timer(self):
        try:
            while int(self._time) >= 0:
                PrintHandler.print_timer_blink_msg(str(self._time), int(self._time))

                time.sleep(1)
                self._time.move_time()

            Alarmer.begin_alarm()
        except KeyboardInterrupt:
            exit()


class StopWatch():
    def __init__(self):
        self._time = StopWatchTime(0)

    def start_count(self):
        try:
            while True:
                PrintHandler.print_regular_blink_msg(str(self._time), int(self._time))

                time.sleep(1)
                self._time.move_time()

        except KeyboardInterrupt:
            exit()


class ParseHandler():

    def __init__(self):
        self._parser = argparse.ArgumentParser()

    def start_parsing(self):
        self._parser.add_argument(
            '-H', type=int, help='total time in hours', default=0)
        self._parser.add_argument(
            '-m', type=int, help='total time in minutes', default=0)
        self._parser.add_argument(
            '-s', type=int, help='total time in seconds', default=0)
        self._parser.add_argument(
            '-sw', help='start stopwatch', action='store_true')

        args = self._parser.parse_args()

        if args.H or args.m or args.s:
            timer = Timer((args.H * 60 * 60) + (args.m * 60) + args.s)
            timer.start_timer()
        elif args.sw:
            stopWatch = StopWatch()
            stopWatch.start_count()


parseHandler = ParseHandler()
parseHandler.start_parsing()
